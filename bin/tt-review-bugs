#!/bin/bash
# tt-review-bugs - Critical bug and correctness review using shared library

# Source the shared library
source "$(dirname "$0")/tt-common.sh"

# Function to detect default branch
get_default_branch() {
    local default_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@')

    if [[ -n "$default_branch" ]]; then
        echo "$default_branch"
        return
    fi

    if git show-ref --verify --quiet refs/heads/main; then
        if git show-ref --verify --quiet refs/heads/master; then
            echo "master"
        else
            echo "main"
        fi
    elif git show-ref --verify --quiet refs/heads/master; then
        echo "master"
    else
        echo "master"
    fi
}

tt_main() {
    # Configure this script
    tt_set_config \
        --template-name "review-bugs" \
        --output-file "CODE_REVIEW_BUGS.md" \
        --description "Performs critical bug and correctness review"

    # Parse arguments for base branch (handle manually since we need base_branch logic)
    local base_branch=""
    local remaining_args=()
    
    # Simple argument parsing for this script
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                tt_show_usage
                exit 0
                ;;
            --dry-run)
                TT_DRY_RUN=true
                shift
                ;;
            *)
                base_branch="$1"
                shift
                ;;
        esac
    done
    
    # Use default branch if none specified
    if [[ -z "$base_branch" ]]; then
        base_branch=$(get_default_branch)
    fi

    # Get current branch name
    local current_branch
    current_branch=$(git branch --show-current)

    if [[ -z "$current_branch" ]]; then
        echo "Error: Not on a branch" >&2
        exit 1
    fi

    # Get list of changed files
    local changed_files
    changed_files=$(git diff --name-only "$base_branch" 2>/dev/null | while read -r file; do [[ -f "$file" ]] && echo "$file"; done || true)

    if [[ -z "$changed_files" ]]; then
        echo "No changes detected between $current_branch and $base_branch"
        exit 0
    fi

    local file_count
    file_count=$(echo "$changed_files" | wc -l | tr -d ' ')

    echo "Generating critical bug review for $file_count files..."

    # Get the diff content
    local diff_content
    diff_content=$(git diff "$base_branch")

    # Set the template content
    tt_set_template << 'EOF'
# Critical Bug and Correctness Review

Identify **critical bugs, crashes, security vulnerabilities, and correctness issues** in changed code only.

**CRITICAL**: Review ONLY changed lines (+ lines in diff). Focus on issues that will cause runtime failures, data corruption, or security breaches.

## Priority Focus Areas
1. **Crashes/Exceptions**: Null pointers, undefined behavior, uncaught exceptions
2. **Data Corruption**: Race conditions, incorrect state mutations, data loss
3. **Security Vulnerabilities**: SQL injection, XSS, auth bypass, exposed secrets
4. **Logic Errors**: Off-by-one, incorrect conditionals, infinite loops
5. **Resource Issues**: Memory leaks, file handle leaks, deadlocks

## Out of Scope  
- Style issues or code smell (unless they cause bugs)
- Performance (unless it causes timeouts/failures)
- Pre-existing unchanged code
- Documentation or comments
- Test coverage

## Output Format
```
# Critical Bug Review

## 🚨 CRITICAL ISSUES (MUST FIX)
### [Issue] - CRITICAL
- **Location**: file_path:line_numbers
- **Bug Type**: [crash/security/data-loss/logic-error]
- **What Happens**: [specific failure scenario]
- **Impact**: [user-facing consequence]
- **Fix**: [specific code change needed]

## ⚠️ HIGH RISK BUGS
### [Issue] - HIGH
- **Location**: file_path:line_numbers
- **Bug Type**: [category]
- **Risk**: [what could go wrong]
- **Scenario**: [when this fails]
- **Fix**: [recommended solution]

## 🔍 POTENTIAL ISSUES
### [Issue] - MEDIUM
- **Location**: file_path:line_numbers
- **Concern**: [what might fail]
- **Conditions**: [when it could happen]
- **Mitigation**: [how to prevent]

## ✅ SUMMARY
- Critical Issues: X (must fix before merge)
- High Risk Bugs: Y (should fix)
- Potential Issues: Z (consider fixing)

Overall Risk Assessment: [BLOCKED|HIGH-RISK|MODERATE|LOW]
```

Focus on REAL bugs that WILL cause problems, not theoretical issues.
EOF

    # Set the context with PR details and diff
    tt_set_context "## PR Details
Branch: $current_branch
Files Changed: $file_count

## Diff
\`\`\`diff
$diff_content
\`\`\`"

    # Set the target files (changed files)
    tt_set_target_files "$(echo "$changed_files" | tr '\n' ' ')"
}

# Main execution
tt_main "$@"
tt_run