#!/bin/bash
# tt-review-bugs - Critical bug and correctness review using shared library

# Source the shared library
source "$(dirname "$0")/tt-common.sh"

tt_main() {
    # Configure this script
    tt_set_config \
        --template-name "review-bugs" \
        --output-file "CODE_REVIEW_BUGS.md" \
        --description "Performs critical bug and correctness review"

    # Use the shared function for git diff setup
    tt_setup_diff_review "$@"

    # Set the template content
    tt_set_template << 'EOF'
# Critical Bug and Correctness Review - Conservative Mode

**IMPORTANT MINDSET**: Most code that reaches review is probably correct. Be EXTREMELY conservative.
The developer who wrote this code understands their system better than you do from a quick review.

## Your Mission
Find ONLY bugs that you can PROVE will cause actual failures. Not suggestions, not improvements, not "might be better if" - only PROVEN BUGS.

## Review Rules

### DO NOT REPORT:
- Theoretical edge cases without proof
- "Could potentially" or "might possibly" issues
- Style preferences disguised as bugs
- Performance issues unless they break functionality
- Missing error handling if errors are handled upstream
- "Best practices" that don't prevent actual bugs
- Anything starting with "Consider..." or "It would be better if..."

### ONLY REPORT:
- Issues where you can provide EXACT input that causes failure
- Bugs where you can trace the EXACT execution path to crash
- Security vulnerabilities with SPECIFIC exploit examples
- Logic errors with CONCRETE failing test cases

## Evidence Requirements

For EVERY issue you report, you MUST provide:
1. **Specific Trigger**: Exact input/state that causes the bug
2. **Execution Trace**: Line-by-line path showing how it fails
3. **Proof of Impact**: Specific error message, crash, or data corruption
4. **Confidence Score**: Only report if confidence > 85%

Example of GOOD bug report:
```
Input: user_id = null
Execution: Line 42 calls user.getName() 
Result: NullPointerException
Proof: No null check between lines 40-42
Confidence: 95%
```

Example of BAD bug report (DO NOT DO THIS):
```
"This could fail if user is null"
"Consider adding error handling"
"Might cause issues in edge cases"
```

## Output Format
```
# Critical Bug Review

## 🚨 CONFIRMED BUGS (Confidence > 85%)
### [Specific Bug Title]
- **Location**: file_path:line_number
- **Confidence**: [85-100]%
- **Proof of Bug**:
  - Failing input: `[exact value]`
  - Execution path: [line X → line Y → crash]
  - Error produced: `[exact error message]`
- **Impact**: [User-visible failure]
- **Fix**: [Specific code change]

## ⚠️ POSSIBLE BUGS (Confidence 70-85%)
### [Issue Title]
- **Location**: file_path:line_number
- **Confidence**: [70-85]%
- **Why Uncertain**: [What prevents 100% confidence]
- **Suspected Issue**: [Specific concern]
- **How to Verify**: [Test to confirm]

## ✅ SUMMARY
- Confirmed Bugs (>85% confidence): X
- Possible Bugs (70-85% confidence): Y
- Total Lines Reviewed: Z
- False Positive Rate Target: <10%

Risk Level: [CRITICAL|HIGH|MEDIUM|LOW|NONE]
```

REMEMBER: When in doubt, DON'T report it. It's better to miss a minor bug than create false positive noise.
The code is probably correct. Prove otherwise or stay silent.
EOF
}

# Main execution
tt_main "$@"
tt_run