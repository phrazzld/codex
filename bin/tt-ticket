#!/bin/bash
# tt-ticket - Task breakdown using shared library

# Source the shared library
source "$(dirname "$0")/tt-common.sh"

tt_main() {
    # Parse arguments for plan file (handle manually since we need plan file logic)
    local plan_file="PLAN.md"
    local remaining_args=()
    
    # Simple argument parsing for this script
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                tt_show_usage
                exit 0
                ;;
            --dry-run)
                TT_DRY_RUN=true
                shift
                ;;
            *)
                # If it's not a flag, assume it's the plan file
                if [[ ! "$1" =~ ^- ]]; then
                    plan_file="$1"
                fi
                shift
                ;;
        esac
    done

    # Configure this script
    tt_set_config \
        --template-name "ticket" \
        --output-file "TODO.md" \
        --description "Generates TODO.md task breakdown from implementation plan" \
        --requires-input-file "$plan_file"

    # Read the plan content
    local plan_content
    plan_content=$(cat "$plan_file")

    # Set the template content
    tt_set_template << 'EOF'
# Ticket Breakdown

Break PLAN.md into atomic, testable tasks. Each ticket: verb-first title, clear action steps, done-when criteria.

## Process
1. **Map plan to tasks** - Every step/risk becomes a ticket
2. **Structure tasks**:
   - Verb-first title (one line)
   - Action steps (1-3 bullets max)
   - Done-when criteria (observable behavior)
   - Type: Feature|Refactor|Test|Chore|Bugfix
   - Priority: P0|P1|P2|P3 (default P2)
   - Dependencies: ticket IDs or none
3. **Assign IDs** - Start T001 if TODO.md missing, ensure uniqueness

## Output Format
```
# Todo

## <Module>
- [ ] **T001 · Feature · P2: implement user authentication**
    - **Context:** Section 3.1 from PLAN.md
    - **Action:**
        1. Create login endpoint
        2. Add JWT token validation
    - **Done-when:**
        1. Tests pass for auth flow
        2. Integration tests complete
    - **Depends-on:** none
```

Rules: Return only TODO.md content. No tickets >1 day effort. Dependencies form DAG.
EOF

    # Set the context with plan details
    tt_set_context "## Plan Details

$plan_content

## Task Breakdown Requirements
- Create atomic, independent tasks
- Ensure proper dependency mapping
- Include verification steps
- Follow project task ID and formatting conventions"

    # Set the target files to include the plan file
    tt_set_target_files "$plan_file"
}

# Main execution
tt_main "$@"
tt_run