#!/bin/bash
# tt-groom - Backlog grooming using shared library

# Source the shared library
source "$(dirname "$0")/tt-common.sh"

# Custom output handling for grooming (replaces default tt_handle_output)
tt_groom_handle_output() {
    # Find the most recent output directory created by thinktank
    local latest_output_dir
    latest_output_dir=$(find . -maxdepth 1 -name "thinktank-*" -type d -newermt '1 minute ago' 2>/dev/null | sort -r | head -1)
    
    if [[ -n "$latest_output_dir" ]]; then
        # Look for the main output file in the directory
        local output_file
        output_file=$(find "$latest_output_dir" -name "*.md" -type f | head -1)
        
        if [[ -n "$output_file" ]]; then
            # Save current backlog as backup
            cp BACKLOG.md BACKLOG.md.backup
            echo "Saved current backlog to BACKLOG.md.backup"
            
            # Copy output to groomed file
            cp "$output_file" BACKLOG.md.groomed
            echo "Created BACKLOG.md.groomed from thinktank output"
            
            # Show preview of groomed backlog
            echo ""
            echo "Preview of groomed backlog:"
            echo "=========================="
            head -30 BACKLOG.md.groomed
            echo ""
            echo "[...truncated for preview]"
            echo ""
            
            # Prompt for replacing backlog
            read -p "Replace BACKLOG.md with groomed version? (y/N): " -n 1 -r
            echo ""
            
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                mv BACKLOG.md.groomed BACKLOG.md
                echo "BACKLOG.md has been updated with groomed version"
                echo "Original backlog saved as BACKLOG.md.backup"
            else
                echo "Groomed backlog saved as BACKLOG.md.groomed"
                echo "Original BACKLOG.md unchanged"
            fi
            
            echo ""
            echo "Backlog grooming complete!"
            return 0
        else
            echo "Warning: Could not find output file in $latest_output_dir" >&2
            return 1
        fi
    else
        echo "Warning: Could not find thinktank output directory" >&2
        echo "Make sure thinktank executed successfully" >&2
        return 1
    fi
}

tt_main() {
    # Configure this script
    tt_set_config \
        --template-name "groom" \
        --output-file "BACKLOG.md.groomed" \
        --description "Organizes, expands, and prioritizes the project backlog" \
        --requires-input-file "BACKLOG.md"

    # Read the current backlog content
    local backlog_content
    backlog_content=$(cat BACKLOG.md)

    # Set the template content
    tt_set_template << 'EOF'
# Backlog Grooming

Transform current backlog into organized, prioritized roadmap. Balance technical excellence with practical delivery.

## Analysis
1. **Current backlog** - Priorities, technical debt, feature plans
2. **Codebase architecture** - Strengths, weaknesses, constraints  
3. **Development philosophy** - Ideal structure and patterns

## Multi-Dimensional Perspective
- **Business**: User adoption, competitive advantage, revenue impact
- **Technical**: Code quality, architecture, performance, security
- **Innovation**: Research spikes, proof-of-concepts, novel approaches
- **Operations**: Monitoring, deployment, reliability, scalability

## Organization Structure
```markdown
# BACKLOG

## High Priority
### [Category]
- **[Type]**: Description
  - **Complexity**: Simple/Medium/Complex
  - **Rationale**: Why this matters
  - **Expected Outcome**: Success criteria
  - **Dependencies**: Related items

## Medium Priority
## Low Priority
## Future Considerations
```

## Guidelines
- Retain valuable ideas, expand where needed
- Split broad items, combine related ones
- Prioritize by impact vs effort
- Items actionable but not prescriptive
- Return only formatted BACKLOG.md content
EOF

    # Set the context with backlog content
    tt_set_context "## Backlog Grooming Context

### Current Backlog
$backlog_content

### Grooming Goals
- Prioritize items based on business value and technical dependencies
- Identify missing tasks that should be added
- Remove or modify outdated tasks
- Ensure all tasks are clear, atomic, and actionable"
}

# Custom main execution that overrides output handling
tt_main "$@"

# Validate configuration
if [[ -z "$TT_CONFIG_TEMPLATE_NAME" || -z "$TT_CONFIG_OUTPUT_FILE" || -z "$TT_CONFIG_DESCRIPTION" ]]; then
    echo "Error: tt_set_config must be called with required parameters" >&2
    exit 1
fi

if [[ -z "$TT_TEMPLATE_CONTENT" ]]; then
    echo "Error: tt_set_template must be called" >&2
    exit 1
fi

# Parse arguments
local remaining_args
remaining_args=$(tt_parse_args "$@")

# Check requirements
tt_check_requirements

# Create instruction file
local instruction_file
instruction_file=$(tt_create_temp_files)

# Find leyline files
local leyline_files
leyline_files=$(tt_find_leyline_files)

# Use target files if set, otherwise use remaining args
local target_files
if [[ -n "$TT_TARGET_FILES" ]]; then
    target_files="$TT_TARGET_FILES"
else
    target_files="$remaining_args"
fi

# Execute thinktank
if ! tt_execute_thinktank "$instruction_file" "$target_files" "$leyline_files"; then
    exit 1
fi

# Handle output with custom logic (skip for dry run)
if [[ "$TT_DRY_RUN" != true ]]; then
    if ! tt_groom_handle_output; then
        exit 1
    fi
fi