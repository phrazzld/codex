#!/bin/bash
# tt-review-quality - General code quality review using shared library

# Source the shared library
source "$(dirname "$0")/tt-common.sh"

tt_main() {
    # Configure this script
    tt_set_config \
        --template-name "review-quality" \
        --output-file "CODE_REVIEW_QUALITY.md" \
        --description "Performs comprehensive code quality review"

    # Use the shared function for git diff setup
    tt_setup_diff_review "$@"

    # Set the template content
    tt_set_template << 'EOF'
# Code Quality Review - Objective Issues Only

**CRITICAL INSTRUCTION**: Only report OBJECTIVE quality issues that have MEASURABLE negative impact.
Do NOT report subjective preferences, style choices, or "best practices" without clear harm.

## Review Philosophy

The developer's code is probably fine. They understand their system's constraints and requirements.
Only flag issues that:
1. **Objectively harm** maintainability (not just "could be cleaner")
2. **Demonstrably increase** bug risk (not just "might be safer")
3. **Measurably degrade** performance (not just "could be faster")

## DO NOT REPORT

‚ùå **Subjective Preferences**:
- "I prefer X pattern over Y"
- "Consider using [alternative approach]"
- "It would be cleaner if..."
- "Best practice suggests..."

‚ùå **Minor Style Issues**:
- Variable naming preferences (unless truly misleading)
- Formatting that doesn't break readability
- Missing comments on clear code
- Different but valid approaches

‚ùå **Theoretical Improvements**:
- "Could be more efficient" without measurement
- "Might be more maintainable" without evidence
- "Should follow SOLID" when current code works
- "Consider adding abstraction" for simple cases

## ONLY REPORT

‚úÖ **Objective Problems with Evidence**:
- Code that is genuinely incomprehensible (show why)
- Clear violations of language semantics
- Obvious performance problems (O(n¬≥) when O(n) is available)
- Actual maintainability traps (show how it will break)

‚úÖ **Measurable Issues**:
- Duplicated code blocks (>10 lines, exact copies)
- Complexity metrics exceeding thresholds (cyclomatic >15)
- Clear resource leaks (allocated but never freed)
- Broken contracts or interfaces

## Evidence Requirements

For each issue, provide:
- **Objective Metric**: Specific measurement or count
- **Clear Harm**: How this actually hurts the codebase
- **Confidence**: Only report if >80% certain

## Output Format
```
# Code Quality Review

## üî¥ OBJECTIVE QUALITY ISSUES (Confidence > 80%)
### [Specific Issue Title]
- **Location**: file_path:line_numbers
- **Confidence**: [80-100]%
- **Objective Evidence**:
  - Metric: [e.g., "Cyclomatic complexity: 23"]
  - Measurement: [e.g., "47 lines of exact duplication"]
  - Impact: [e.g., "Changes require updates in 3 places"]
- **Actual Harm**: [How this measurably hurts the project]
- **Fix**: [Specific, necessary change]

## ‚ö†Ô∏è LIKELY ISSUES (Confidence 70-80%)
### [Issue Title]
- **Location**: file_path:line_numbers
- **Confidence**: [70-80]%
- **Concern**: [Objective observation]
- **Potential Impact**: [Measurable risk]
- **Worth Investigating**: [What to check]

## ‚úÖ SUMMARY
- Objective Issues Found: X
- Total Subjective Preferences Filtered: Y
- Lines Reviewed: Z
- Confidence Threshold: 80%

Quality Assessment: [PROBLEMATIC|ACCEPTABLE|GOOD]
(Based only on objective metrics, not preferences)
```

REMEMBER: The developer's code is probably fine. Report only objective, measurable issues with clear negative impact.
When in doubt, stay silent. No subjective preferences. No "best practices" without proof of harm.
EOF
}

# Main execution
tt_main "$@"
tt_run