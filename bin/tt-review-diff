#!/bin/bash
set -e

# Function to display usage
usage() {
    echo "Usage: $0 [base_branch]"
    echo "  base_branch: Branch to compare against (default: auto-detected main/master)"
    echo ""
    echo "Performs diff-focused code review (bugs, functional issues) -> CODE_REVIEW_DIFF.md"
    exit 1
}

# Function to detect default branch
get_default_branch() {
    local default_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@')

    if [ -n "$default_branch" ]; then
        echo "$default_branch"
        return
    fi

    if git show-ref --verify --quiet refs/heads/main; then
        if git show-ref --verify --quiet refs/heads/master; then
            echo "master"
        else
            echo "main"
        fi
    elif git show-ref --verify --quiet refs/heads/master; then
        echo "master"
    else
        echo "master"
    fi
}

# Parse arguments
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    usage
elif [ -n "$1" ]; then
    BASE_BRANCH="$1"
else
    BASE_BRANCH=$(get_default_branch)
fi

# Get current branch name
CURRENT_BRANCH=$(git branch --show-current)

if [ -z "$CURRENT_BRANCH" ]; then
    echo "Error: Not on a branch"
    exit 1
fi

# Get list of changed files
CHANGED_FILES=$(git diff --name-only "$BASE_BRANCH" 2>/dev/null | while read -r file; do [ -f "$file" ] && echo "$file"; done || true)

if [ -z "$CHANGED_FILES" ]; then
    echo "No changes detected between $CURRENT_BRANCH and $BASE_BRANCH"
    exit 0
fi

FILE_COUNT=$(echo "$CHANGED_FILES" | wc -l | tr -d ' ')

echo "Generating diff-focused code review for $FILE_COUNT files..."

# Update glance files first (may take several minutes for large codebases)
# if [ "$SKIP_GLANCE_UPDATE" != "1" ]; then
#     echo "Updating glance context files (this may take up to 10+ minutes for large codebases)..."
#     if glance ./ >/dev/null 2>&1; then
#         echo "âœ“ Glance context files updated successfully"
#     else
#         echo "âš  Warning: Failed to update glance files, proceeding with existing context"
#     fi
# fi

# Create context file
cat > REVIEW-CONTEXT.md << EOF
# Code Review Context

## PR Details
Branch: $CURRENT_BRANCH
Files Changed: $FILE_COUNT

## Diff
$(git diff "$BASE_BRANCH")
EOF

# Convert newline-separated files to space-separated for command
FILES_ARGS=$(echo "$CHANGED_FILES" | tr '\n' ' ')

# Run diff-focused review
echo "Analyzing diff for bugs and functional issues..."
thinktank-wrapper --template review-diff --inject REVIEW-CONTEXT.md --include-leyline $FILES_ARGS

# Find the most recent synthesis file
SYNTHESIS_FILE=$(find . -name "*synthesis.md" -newermt '1 minute ago' 2>/dev/null | head -1)

if [ -n "$SYNTHESIS_FILE" ]; then
    cp "$SYNTHESIS_FILE" CODE_REVIEW_DIFF.md
    echo "âœ“ Created CODE_REVIEW_DIFF.md (functional issues)"
    rm -f REVIEW-CONTEXT.md
    echo ""
    echo "Diff-focused code review complete!"
    echo "ðŸ“‹ Functional issues: CODE_REVIEW_DIFF.md"
else
    echo "Warning: Could not find synthesis file for diff review"
    echo "Review context saved in REVIEW-CONTEXT.md for manual inspection"
    exit 1
fi
