#!/bin/bash

# Zero-configuration code review - just works
# Focuses on real issues, filters false positives

# Accept optional base branch argument, but no flags
BASE_BRANCH=""
if [[ $# -gt 0 ]]; then
    if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        echo "Usage: $0 [base_branch]"
        echo "  Runs comprehensive code review with automatic false positive filtering"
        echo "  base_branch: Optional branch to compare against (default: auto-detected)"
        exit 0
    fi
    BASE_BRANCH="$1"
fi

echo ""
echo "🔍 Smart Code Review System"
echo "=========================="
echo "Running essential reviews with false positive filtering..."
echo ""

# Track successful reviews
SUCCESSFUL_REVIEWS=()
FAILED_REVIEWS=()

# Phase 1: Essential reviews (bugs and quality only)
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📋 Phase 1: Analyzing for critical issues..."
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Run bug review with real-time output
echo "▶️  Checking for bugs and correctness issues..."
if [ -t 1 ]; then
    # Interactive: show output in real-time
    if tt-review-bugs "$BASE_BRANCH" 2>&1 | tee /dev/tty | grep -q "Analysis complete"; then
        SUCCESSFUL_REVIEWS+=("bugs")
        echo "✅ Bug review completed"
    else
        FAILED_REVIEWS+=("bugs")
        echo "❌ Bug review failed"
    fi
else
    # Non-interactive: just capture and check
    if tt-review-bugs "$BASE_BRANCH" 2>&1 | grep -q "Analysis complete"; then
        SUCCESSFUL_REVIEWS+=("bugs")
        echo "✅ Bug review completed"
    else
        FAILED_REVIEWS+=("bugs")
        echo "❌ Bug review failed"
    fi
fi
echo ""

# Run quality review with real-time output
echo "▶️  Checking code quality and maintainability..."
if [ -t 1 ]; then
    # Interactive: show output in real-time
    if tt-review-quality "$BASE_BRANCH" 2>&1 | tee /dev/tty | grep -q "Analysis complete"; then
        SUCCESSFUL_REVIEWS+=("quality")
        echo "✅ Quality review completed"
    else
        FAILED_REVIEWS+=("quality")
        echo "❌ Quality review failed"
    fi
else
    # Non-interactive: just capture and check
    if tt-review-quality "$BASE_BRANCH" 2>&1 | grep -q "Analysis complete"; then
        SUCCESSFUL_REVIEWS+=("quality")
        echo "✅ Quality review completed"
    else
        FAILED_REVIEWS+=("quality")
        echo "❌ Quality review failed"
    fi
fi
echo ""

# Phase 2: Validation (only if we have successful reviews)
if [ ${#SUCCESSFUL_REVIEWS[@]} -gt 0 ]; then
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "✓ Phase 2: Validating findings to reduce false positives..."
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    
    if [ -t 1 ]; then
        # Interactive: show output in real-time
        if tt-review-validate "$BASE_BRANCH" 2>&1 | tee /dev/tty | grep -q "Analysis complete"; then
            SUCCESSFUL_REVIEWS+=("validate")
            echo "✅ Validation completed"
        else
            # Validation failure is not critical - continue to synthesis
            echo "⚠️  Validation had issues but continuing..."
        fi
    else
        # Non-interactive: just capture and check
        if tt-review-validate "$BASE_BRANCH" 2>&1 | grep -q "Analysis complete"; then
            SUCCESSFUL_REVIEWS+=("validate")
            echo "✅ Validation completed"
        else
            # Validation failure is not critical - continue to synthesis
            echo "⚠️  Validation had issues but continuing..."
        fi
    fi
    echo ""
fi

# Phase 3: Synthesis (combine all reports)
if [ ${#SUCCESSFUL_REVIEWS[@]} -gt 1 ]; then
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "📊 Phase 3: Creating unified report..."
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    
    if [ -t 1 ]; then
        # Interactive: show output in real-time
        if tt-review-synthesis 2>&1 | tee /dev/tty | grep -q "Analysis complete"; then
            echo "✅ Synthesis completed"
            SYNTHESIS_SUCCESS=true
        else
            echo "❌ Synthesis failed"
            SYNTHESIS_SUCCESS=false
        fi
    else
        # Non-interactive: just capture and check
        if tt-review-synthesis 2>&1 | grep -q "Analysis complete"; then
            echo "✅ Synthesis completed"
            SYNTHESIS_SUCCESS=true
        else
            echo "❌ Synthesis failed"
            SYNTHESIS_SUCCESS=false
        fi
    fi
    echo ""
fi

# Summary
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📊 Review Complete"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# List generated reports
echo "Generated reports:"
for review in "${SUCCESSFUL_REVIEWS[@]}"; do
    upper_review=$(echo "$review" | tr '[:lower:]' '[:upper:]')
    if [ -f "CODE_REVIEW_${upper_review}.md" ]; then
        echo "  ✓ CODE_REVIEW_${upper_review}.md"
    fi
done

# Show primary output
if [ ${#SUCCESSFUL_REVIEWS[@]} -gt 1 ] && [ "$SYNTHESIS_SUCCESS" = true ]; then
    echo ""
    echo "📋 Main report: CODE_REVIEW_SYNTHESIS.md"
    echo ""
    echo "This report contains validated findings with reduced false positives."
elif [ -f "CODE_REVIEW_VALIDATED.md" ]; then
    echo ""
    echo "📋 Main report: CODE_REVIEW_VALIDATED.md"
else
    echo ""
    echo "Check individual report files for details."
fi

echo ""

# Exit status
if [ ${#FAILED_REVIEWS[@]} -eq 0 ]; then
    echo "✅ Review completed successfully!"
    exit 0
elif [ ${#SUCCESSFUL_REVIEWS[@]} -gt 0 ]; then
    echo "⚠️  Review completed with some issues. Check reports for findings."
    exit 0
else
    echo "❌ Review failed. Please check the output above for errors."
    exit 1
fi